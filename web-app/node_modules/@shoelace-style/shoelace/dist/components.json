{
  "timestamp": "2020-12-23T22:05:28",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.3.0",
    "typescriptVersion": "4.0.5"
  },
  "components": [
    {
      "filePath": "./src/components/alert/alert.tsx",
      "encapsulation": "shadow",
      "tag": "sl-alert",
      "readme": "# sl-alert\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The alert's content.",
          "name": "slot"
        },
        {
          "text": "icon - An icon to show in the alert.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "icon - The container that wraps the alert icon.",
          "name": "part"
        },
        {
          "text": "message - The alert message.",
          "name": "part"
        },
        {
          "text": "close-button - The close button.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": true,
          "docs": "Set to true to make the alert closable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with the\nalert before it closes (e.g. moves the mouse over it), the timer will restart.",
          "docsTags": [],
          "default": "Infinity",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"danger\" | \"info\" | \"primary\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The type of alert.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the alert",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the alert.",
          "docsTags": []
        },
        {
          "name": "toast",
          "returns": {
            "type": "Promise<unknown>",
            "docs": ""
          },
          "signature": "toast() => Promise<unknown>",
          "parameters": [],
          "docs": "Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when\ndismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by\ncalling this method again. The returned promise will resolve after the alert is hidden.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-after-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the alert closes and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-after-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the alert opens and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the alert closes. Calling `event.preventDefault()` will prevent it from being closed.",
          "docsTags": []
        },
        {
          "event": "sl-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the alert opens. Calling `event.preventDefault()` will prevent it from being opened.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--box-shadow",
          "annotation": "prop",
          "docs": "The alert's box shadow."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The alert's content."
        },
        {
          "name": "icon",
          "docs": "An icon to show in the alert."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "close-button",
          "docs": "The close button."
        },
        {
          "name": "icon",
          "docs": "The container that wraps the alert icon."
        },
        {
          "name": "message",
          "docs": "The alert message."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-icon-button"
      ],
      "dependencyGraph": {
        "sl-alert": [
          "sl-icon-button"
        ],
        "sl-icon-button": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/animation/animation.tsx",
      "encapsulation": "shadow",
      "tag": "sl-animation",
      "readme": "# sl-animation\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The element to animate. If multiple elements are to be animated, wrap them in a single container.",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "delay",
          "type": "number",
          "mutable": false,
          "attr": "delay",
          "reflectToAttr": false,
          "docs": "The number of milliseconds to delay the start of the animation.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "direction",
          "type": "\"alternate\" | \"alternate-reverse\" | \"normal\" | \"reverse\"",
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": false,
          "docs": "Determines the direction of playback as well as the behavior when reaching the end of an iteration.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "alternate",
              "type": "string"
            },
            {
              "value": "alternate-reverse",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "reverse",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "The number of milliseconds each iteration of the animation takes to complete.",
          "docsTags": [],
          "default": "1000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "easing",
          "type": "string",
          "mutable": false,
          "attr": "easing",
          "reflectToAttr": false,
          "docs": "The rate of the animation's change over time.",
          "docsTags": [],
          "default": "'linear'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "endDelay",
          "type": "number",
          "mutable": false,
          "attr": "end-delay",
          "reflectToAttr": false,
          "docs": "The number of milliseconds to delay after the active period of an animation sequence.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fill",
          "type": "\"auto\" | \"backwards\" | \"both\" | \"forwards\" | \"none\"",
          "mutable": false,
          "attr": "fill",
          "reflectToAttr": false,
          "docs": "Sets how the animation applies styles to its target before and after its execution.",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "backwards",
              "type": "string"
            },
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "forwards",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iterationStart",
          "type": "number",
          "mutable": false,
          "attr": "iteration-start",
          "reflectToAttr": false,
          "docs": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iterations",
          "type": "number",
          "mutable": false,
          "attr": "iterations",
          "reflectToAttr": false,
          "docs": "The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.",
          "docsTags": [],
          "default": "Infinity",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyframes",
          "type": "Keyframe[]",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The keyframes to use for the animation. If this is set, `name` will be ignored.",
          "docsTags": [],
          "values": [
            {
              "type": "Keyframe[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the animation to use.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pause",
          "type": "boolean",
          "mutable": false,
          "attr": "pause",
          "reflectToAttr": false,
          "docs": "Pauses the animation. The animation will resume when this prop is removed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "playbackRate",
          "type": "number",
          "mutable": false,
          "attr": "playback-rate",
          "reflectToAttr": false,
          "docs": "Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this\nto `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This\nvalue can be changed without causing the animation to restart.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "cancel",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "cancel() => Promise<void>",
          "parameters": [],
          "docs": "Clears all KeyframeEffects caused by this animation and aborts its playback.",
          "docsTags": []
        },
        {
          "name": "finish",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "finish() => Promise<void>",
          "parameters": [],
          "docs": "Sets the playback time to the end of the animation corresponding to the current playback direction.",
          "docsTags": []
        },
        {
          "name": "getAnimationNames",
          "returns": {
            "type": "Promise<string[]>",
            "docs": ""
          },
          "signature": "getAnimationNames() => Promise<string[]>",
          "parameters": [],
          "docs": "Gets a list of all supported animation names.",
          "docsTags": []
        },
        {
          "name": "getCurrentTime",
          "returns": {
            "type": "Promise<number>",
            "docs": ""
          },
          "signature": "getCurrentTime() => Promise<number>",
          "parameters": [],
          "docs": "Gets the current time of the animation in milliseconds.",
          "docsTags": []
        },
        {
          "name": "getEasingNames",
          "returns": {
            "type": "Promise<string[]>",
            "docs": ""
          },
          "signature": "getEasingNames() => Promise<string[]>",
          "parameters": [],
          "docs": "Gets a list of all supported easing function names.",
          "docsTags": []
        },
        {
          "name": "setCurrentTime",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setCurrentTime(time: number) => Promise<void>",
          "parameters": [],
          "docs": "Sets the current time of the animation in milliseconds.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-cancel",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the animation is canceled.",
          "docsTags": []
        },
        {
          "event": "sl-finish",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the animation finishes.",
          "docsTags": []
        },
        {
          "event": "sl-start",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the animation starts or restarts.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The element to animate. If multiple elements are to be animated, wrap them in a single container."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/avatar/avatar.tsx",
      "encapsulation": "shadow",
      "tag": "sl-avatar",
      "readme": "# sl-avatar\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "icon - The default icon to use when no image or initials are present.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "icon - The container that wraps the avatar icon.",
          "name": "part"
        },
        {
          "text": "initials - The container that wraps the avatar initials.",
          "name": "part"
        },
        {
          "text": "image - The avatar image.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "alt",
          "type": "string",
          "mutable": false,
          "attr": "alt",
          "reflectToAttr": false,
          "docs": "Alternative text for the image.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "image",
          "type": "string",
          "mutable": false,
          "attr": "image",
          "reflectToAttr": false,
          "docs": "The image source to use for the avatar.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "initials",
          "type": "string",
          "mutable": false,
          "attr": "initials",
          "reflectToAttr": false,
          "docs": "Initials to use as a fallback when no image is available (1-2 characters max recommended).",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shape",
          "type": "\"circle\" | \"rounded\" | \"square\"",
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": false,
          "docs": "The shape of the avatar.",
          "docsTags": [],
          "default": "'circle'",
          "values": [
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "rounded",
              "type": "string"
            },
            {
              "value": "square",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--size",
          "annotation": "prop",
          "docs": "The size of the avatar."
        }
      ],
      "slots": [
        {
          "name": "icon",
          "docs": "The default icon to use when no image or initials are present."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "icon",
          "docs": "The container that wraps the avatar icon."
        },
        {
          "name": "image",
          "docs": "The avatar image."
        },
        {
          "name": "initials",
          "docs": "The container that wraps the avatar initials."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-icon"
      ],
      "dependencyGraph": {
        "sl-avatar": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/badge/badge.tsx",
      "encapsulation": "shadow",
      "tag": "sl-badge",
      "readme": "# sl-badge\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The badge's content.",
          "name": "slot"
        },
        {
          "text": "base - The base wrapper",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": false,
          "docs": "Set to true to draw a pill-style badge with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pulse",
          "type": "boolean",
          "mutable": false,
          "attr": "pulse",
          "reflectToAttr": false,
          "docs": "Set to true to make the badge pulsate to draw attention.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"danger\" | \"info\" | \"primary\" | \"success\" | \"text\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The badge's type.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The badge's content."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The base wrapper"
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/button/button.tsx",
      "encapsulation": "shadow",
      "tag": "sl-button",
      "readme": "# sl-button\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The button's label.",
          "name": "slot"
        },
        {
          "text": "prefix - Used to prepend an icon or similar element to the button.",
          "name": "slot"
        },
        {
          "text": "suffix - Used to append an icon or similar element to the button.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "prefix - The prefix container.",
          "name": "part"
        },
        {
          "text": "label - The button's label.",
          "name": "part"
        },
        {
          "text": "suffix - The suffix container.",
          "name": "part"
        },
        {
          "text": "caret - The button's caret.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "caret",
          "type": "boolean",
          "mutable": false,
          "attr": "caret",
          "reflectToAttr": false,
          "docs": "Set to true to draw the button with a caret for use with dropdowns, popovers, etc.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "circle",
          "type": "boolean",
          "mutable": false,
          "attr": "circle",
          "reflectToAttr": true,
          "docs": "Set to true to draw a circle button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Set to true to disable the button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string",
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": true,
          "docs": "Set to true to draw the button in a loading state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "An optional name for the button. Ignored when `href` is set.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": true,
          "docs": "Set to true to draw a pill-style button with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The button's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "submit",
          "type": "boolean",
          "mutable": false,
          "attr": "submit",
          "reflectToAttr": true,
          "docs": "Indicates if activating the button should submit the form. Ignored when `href` is set.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Tells the browser where to open the link. Only used when `href` is set.",
          "docsTags": [],
          "values": [
            {
              "value": "_blank",
              "type": "string"
            },
            {
              "value": "_parent",
              "type": "string"
            },
            {
              "value": "_self",
              "type": "string"
            },
            {
              "value": "_top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"danger\" | \"default\" | \"info\" | \"primary\" | \"success\" | \"text\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The button's type.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "An optional value for the button. Ignored when `href` is set.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the button.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the button.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-blur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button loses focus.",
          "docsTags": []
        },
        {
          "event": "sl-focus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button gains focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The button's label."
        },
        {
          "name": "prefix",
          "docs": "Used to prepend an icon or similar element to the button."
        },
        {
          "name": "suffix",
          "docs": "Used to append an icon or similar element to the button."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "caret",
          "docs": "The button's caret."
        },
        {
          "name": "label",
          "docs": "The button's label."
        },
        {
          "name": "prefix",
          "docs": "The prefix container."
        },
        {
          "name": "suffix",
          "docs": "The suffix container."
        }
      ],
      "dependents": [
        "sl-color-picker"
      ],
      "dependencies": [
        "sl-spinner"
      ],
      "dependencyGraph": {
        "sl-button": [
          "sl-spinner"
        ],
        "sl-color-picker": [
          "sl-button"
        ]
      }
    },
    {
      "filePath": "./src/components/button-group/button-group.tsx",
      "encapsulation": "shadow",
      "tag": "sl-button-group",
      "readme": "# sl-button-group\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- One or more `<sl-button>` elements to display in the button group.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "A label to use for the button group's `aria-label` attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "One or more `<sl-button>` elements to display in the button group."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/card/card.tsx",
      "encapsulation": "shadow",
      "tag": "sl-card",
      "readme": "# sl-card\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The card's body.",
          "name": "slot"
        },
        {
          "text": "header - The card's header.",
          "name": "slot"
        },
        {
          "text": "footer - The card's footer.",
          "name": "slot"
        },
        {
          "text": "image - The card's image.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "image - The card's image, if present.",
          "name": "part"
        },
        {
          "text": "header - The card's header, if present.",
          "name": "part"
        },
        {
          "text": "body - The card's body.",
          "name": "part"
        },
        {
          "text": "footer - The card's footer, if present.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--border-color",
          "annotation": "prop",
          "docs": "The card's border color, including borders that occur inside the card."
        },
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "The border radius for card edges."
        },
        {
          "name": "--border-width",
          "annotation": "prop",
          "docs": "The width of card borders."
        },
        {
          "name": "--padding",
          "annotation": "prop",
          "docs": "The padding to use for card sections."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The card's body."
        },
        {
          "name": "footer",
          "docs": "The card's footer."
        },
        {
          "name": "header",
          "docs": "The card's header."
        },
        {
          "name": "image",
          "docs": "The card's image."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "body",
          "docs": "The card's body."
        },
        {
          "name": "footer",
          "docs": "The card's footer, if present."
        },
        {
          "name": "header",
          "docs": "The card's header, if present."
        },
        {
          "name": "image",
          "docs": "The card's image, if present."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/checkbox/checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "sl-checkbox",
      "readme": "# sl-checkbox\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The checkbox's label.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "control - The checkbox control.",
          "name": "part"
        },
        {
          "text": "checked-icon - The container the wraps the checked icon.",
          "name": "part"
        },
        {
          "text": "indeterminate-icon - The container that wraps the indeterminate icon.",
          "name": "part"
        },
        {
          "text": "label - The checkbox label.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Set to true to draw the checkbox in a checked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": true,
          "attr": "indeterminate",
          "reflectToAttr": true,
          "docs": "Set to true to draw the checkbox in an indeterminate state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The checkbox's name attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Set to true to make the checkbox a required field.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The checkbox's value attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the checkbox.",
          "docsTags": []
        },
        {
          "name": "reportValidity",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "reportValidity() => Promise<boolean>",
          "parameters": [],
          "docs": "Checks for validity and shows the browser's validation message if the control is invalid.",
          "docsTags": []
        },
        {
          "name": "setCustomValidity",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setCustomValidity(message: string) => Promise<void>",
          "parameters": [],
          "docs": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the checkbox.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-blur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": []
        },
        {
          "event": "sl-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control's checked state changes.",
          "docsTags": []
        },
        {
          "event": "sl-focus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The checkbox's label."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "checked-icon",
          "docs": "The container the wraps the checked icon."
        },
        {
          "name": "control",
          "docs": "The checkbox control."
        },
        {
          "name": "indeterminate-icon",
          "docs": "The container that wraps the indeterminate icon."
        },
        {
          "name": "label",
          "docs": "The checkbox label."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/color-picker/color-picker.tsx",
      "encapsulation": "shadow",
      "tag": "sl-color-picker",
      "readme": "# sl-color-picker\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "trigger - The color picker's dropdown trigger.",
          "name": "part"
        },
        {
          "text": "swatches - The container that holds swatches.",
          "name": "part"
        },
        {
          "text": "swatch - Each individual swatch.",
          "name": "part"
        },
        {
          "text": "grid - The color grid.",
          "name": "part"
        },
        {
          "text": "grid-handle - The color grid's handle.",
          "name": "part"
        },
        {
          "text": "hue-slider - The hue slider.",
          "name": "part"
        },
        {
          "text": "opacity-slider - The opacity slider.",
          "name": "part"
        },
        {
          "text": "slider - Hue and opacity sliders.",
          "name": "part"
        },
        {
          "text": "slider-handle - Hue and opacity slider handles.",
          "name": "part"
        },
        {
          "text": "preview - The preview color.",
          "name": "part"
        },
        {
          "text": "input - The text input.",
          "name": "part"
        },
        {
          "text": "format-button - The toggle format button's base.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the color picker.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"hex\" | \"hsl\" | \"rgb\"",
          "mutable": true,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "The format to use for the display value. If opacity is enabled, these will translate to HEXA, RGBA, and HSLA\nrespectively. The color picker will always accept user input in any format (including CSS color names) and convert\nit to the desired format.",
          "docsTags": [],
          "default": "'hex'",
          "values": [
            {
              "value": "hex",
              "type": "string"
            },
            {
              "value": "hsl",
              "type": "string"
            },
            {
              "value": "rgb",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hoist",
          "type": "boolean",
          "mutable": false,
          "attr": "hoist",
          "reflectToAttr": false,
          "docs": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": false,
          "docs": "Set to true to render the color picker inline rather than inside a dropdown.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "This will be true when the control is in an invalid state. Validity is determined by the `setCustomValidity()`\nmethod using the browser's constraint validation API.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The input's name attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noFormatToggle",
          "type": "boolean",
          "mutable": false,
          "attr": "no-format-toggle",
          "reflectToAttr": false,
          "docs": "Removes the format toggle.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "opacity",
          "type": "boolean",
          "mutable": false,
          "attr": "opacity",
          "reflectToAttr": false,
          "docs": "Whether to show the opacity slider.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Determines the size of the color picker's trigger. This has no effect on inline color pickers.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "swatches",
          "type": "string[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of predefined color swatches to display. Can include any format the color picker can parse, including\nHEX(A), RGB(A), HSL(A), and CSS color names.",
          "docsTags": [],
          "default": "[\n    '#d0021b',\n    '#f5a623',\n    '#f8e71c',\n    '#8b572a',\n    '#7ed321',\n    '#417505',\n    '#bd10e0',\n    '#9013fe',\n    '#4a90e2',\n    '#50e3c2',\n    '#b8e986',\n    '#000',\n    '#444',\n    '#888',\n    '#ccc',\n    '#fff'\n  ]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "uppercase",
          "type": "boolean",
          "mutable": false,
          "attr": "uppercase",
          "reflectToAttr": false,
          "docs": "By default, the value will be set in lowercase. Set this to true to set it in uppercase instead.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The current color.",
          "docsTags": [],
          "default": "'#ffffff'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getFormattedValue",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "signature": "getFormattedValue(format?: 'hex' | 'hexa' | 'rgb' | 'rgba' | 'hsl' | 'hsla') => Promise<string>",
          "parameters": [],
          "docs": "Returns the current value as a string in the specified format.",
          "docsTags": []
        },
        {
          "name": "reportValidity",
          "returns": {
            "type": "Promise<unknown>",
            "docs": ""
          },
          "signature": "reportValidity() => Promise<unknown>",
          "parameters": [],
          "docs": "Checks for validity and shows the browser's validation message if the control is invalid.",
          "docsTags": []
        },
        {
          "name": "setCustomValidity",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setCustomValidity(message: string) => Promise<void>",
          "parameters": [],
          "docs": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-after-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the color picker closes and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-after-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the color picker opens and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the color picker's value changes.",
          "docsTags": []
        },
        {
          "event": "sl-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the color picker closes. Calling `event.preventDefault()` will prevent it from being closed.",
          "docsTags": []
        },
        {
          "event": "sl-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the color picker opens. Calling `event.preventDefault()` will prevent it from being opened.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--grid-handle-size",
          "annotation": "prop",
          "docs": "The size of the color grid's handle."
        },
        {
          "name": "--grid-height",
          "annotation": "prop",
          "docs": "The height of the color grid."
        },
        {
          "name": "--grid-width",
          "annotation": "prop",
          "docs": "The width of the color grid."
        },
        {
          "name": "--slider-handle-size",
          "annotation": "prop",
          "docs": "The diameter of the slider's handle."
        },
        {
          "name": "--slider-height",
          "annotation": "prop",
          "docs": "The height of the hue and alpha sliders."
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "format-button",
          "docs": "The toggle format button's base."
        },
        {
          "name": "grid",
          "docs": "The color grid."
        },
        {
          "name": "grid-handle",
          "docs": "The color grid's handle."
        },
        {
          "name": "hue-slider",
          "docs": "The hue slider."
        },
        {
          "name": "input",
          "docs": "The text input."
        },
        {
          "name": "opacity-slider",
          "docs": "The opacity slider."
        },
        {
          "name": "preview",
          "docs": "The preview color."
        },
        {
          "name": "slider",
          "docs": "Hue and opacity sliders."
        },
        {
          "name": "slider-handle",
          "docs": "Hue and opacity slider handles."
        },
        {
          "name": "swatch",
          "docs": "Each individual swatch."
        },
        {
          "name": "swatches",
          "docs": "The container that holds swatches."
        },
        {
          "name": "trigger",
          "docs": "The color picker's dropdown trigger."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-icon",
        "sl-input",
        "sl-button",
        "sl-dropdown"
      ],
      "dependencyGraph": {
        "sl-color-picker": [
          "sl-icon",
          "sl-input",
          "sl-button",
          "sl-dropdown"
        ],
        "sl-input": [
          "sl-icon"
        ],
        "sl-button": [
          "sl-spinner"
        ]
      }
    },
    {
      "filePath": "./src/components/details/details.tsx",
      "encapsulation": "shadow",
      "tag": "sl-details",
      "readme": "# sl-details\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The details' content.",
          "name": "slot"
        },
        {
          "text": "summary - The details' summary. Alternatively, you can use the summary prop.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "header - The summary header.",
          "name": "part"
        },
        {
          "text": "summary - The details summary.",
          "name": "part"
        },
        {
          "text": "summary-icon - The expand/collapse summary icon.",
          "name": "part"
        },
        {
          "text": "content - The details content.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to prevent the user from toggling the details.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indicates whether or not the details is open. You can use this in lieu of the show/hide methods.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "summary",
          "type": "string",
          "mutable": false,
          "attr": "summary",
          "reflectToAttr": false,
          "docs": "The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the alert",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the alert.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-after-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the details closes and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-after-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the details opens and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the details closes. Calling `event.preventDefault()` will prevent it from being closed.",
          "docsTags": []
        },
        {
          "event": "sl-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the details opens. Calling `event.preventDefault()` will prevent it from being opened.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--hide-duration",
          "annotation": "prop",
          "docs": "The length of the hide transition."
        },
        {
          "name": "--hide-timing-function",
          "annotation": "prop",
          "docs": "The timing function (easing) to use for the hide transition."
        },
        {
          "name": "--show-duration",
          "annotation": "prop",
          "docs": "The length of the show transition."
        },
        {
          "name": "--show-timing-function",
          "annotation": "prop",
          "docs": "The timing function (easing) to use for the show transition."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The details' content."
        },
        {
          "name": "summary",
          "docs": "The details' summary. Alternatively, you can use the summary prop."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "content",
          "docs": "The details content."
        },
        {
          "name": "header",
          "docs": "The summary header."
        },
        {
          "name": "summary",
          "docs": "The details summary."
        },
        {
          "name": "summary-icon",
          "docs": "The expand/collapse summary icon."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-icon"
      ],
      "dependencyGraph": {
        "sl-details": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/dialog/dialog.tsx",
      "encapsulation": "shadow",
      "tag": "sl-dialog",
      "readme": "# sl-dialog\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The dialog's content.",
          "name": "slot"
        },
        {
          "text": "label - The dialog's label. Alternatively, you can use the label prop.",
          "name": "slot"
        },
        {
          "text": "footer - The dialog's footer, usually one or more buttons representing various options.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "overlay - The overlay.",
          "name": "part"
        },
        {
          "text": "panel - The dialog panel (where the dialog and its content is rendered).",
          "name": "part"
        },
        {
          "text": "header - The dialog header.",
          "name": "part"
        },
        {
          "text": "title - The dialog title.",
          "name": "part"
        },
        {
          "text": "close-button - The close button.",
          "name": "part"
        },
        {
          "text": "body - The dialog body.",
          "name": "part"
        },
        {
          "text": "footer - The dialog footer.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The dialog's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noHeader",
          "type": "boolean",
          "mutable": false,
          "attr": "no-header",
          "reflectToAttr": false,
          "docs": "Set to true to disable the header. This will also remove the default close button, so please ensure you provide an\neasy, accessible way for users to dismiss the dialog.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indicates whether or not the dialog is open. You can use this in lieu of the show/hide methods.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the dialog",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the dialog",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-after-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the dialog closes and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-after-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the dialog opens and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the dialog closes. Calling `event.preventDefault()` will prevent it from being closed.",
          "docsTags": []
        },
        {
          "event": "sl-overlay-dismiss",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the overlay is clicked. Calling `event.preventDefault()` will prevent the dialog from closing.",
          "docsTags": []
        },
        {
          "event": "sl-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the dialog opens. Calling `event.preventDefault()` will prevent it from being opened.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--width",
          "annotation": "prop",
          "docs": "The preferred width of the dialog. Note that the dialog will shrink to accommodate smaller screens."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The dialog's content."
        },
        {
          "name": "footer",
          "docs": "The dialog's footer, usually one or more buttons representing various options."
        },
        {
          "name": "label",
          "docs": "The dialog's label. Alternatively, you can use the label prop."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "body",
          "docs": "The dialog body."
        },
        {
          "name": "close-button",
          "docs": "The close button."
        },
        {
          "name": "footer",
          "docs": "The dialog footer."
        },
        {
          "name": "header",
          "docs": "The dialog header."
        },
        {
          "name": "overlay",
          "docs": "The overlay."
        },
        {
          "name": "panel",
          "docs": "The dialog panel (where the dialog and its content is rendered)."
        },
        {
          "name": "title",
          "docs": "The dialog title."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-icon-button"
      ],
      "dependencyGraph": {
        "sl-dialog": [
          "sl-icon-button"
        ],
        "sl-icon-button": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/drawer/drawer.tsx",
      "encapsulation": "shadow",
      "tag": "sl-drawer",
      "readme": "# sl-drawer\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The drawer's content.",
          "name": "slot"
        },
        {
          "text": "label - The dialog's label. Alternatively, you can use the label prop.",
          "name": "slot"
        },
        {
          "text": "footer - The drawer's footer, usually one or more buttons representing various options.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "overlay - The overlay.",
          "name": "part"
        },
        {
          "text": "panel - The drawer panel (where the drawer and its content is rendered).",
          "name": "part"
        },
        {
          "text": "header - The drawer header.",
          "name": "part"
        },
        {
          "text": "title - The drawer title.",
          "name": "part"
        },
        {
          "text": "close-button - The close button.",
          "name": "part"
        },
        {
          "text": "body - The drawer body.",
          "name": "part"
        },
        {
          "text": "footer - The drawer footer.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "contained",
          "type": "boolean",
          "mutable": false,
          "attr": "contained",
          "reflectToAttr": false,
          "docs": "By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of\nits parent element, set this prop and add `position: relative` to the parent.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The drawer's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noHeader",
          "type": "boolean",
          "mutable": false,
          "attr": "no-header",
          "reflectToAttr": false,
          "docs": "Removes the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the drawer.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indicates whether or not the drawer is open. You can use this in lieu of the show/hide methods.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "The direction from which the drawer will open.",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the drawer",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the drawer",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-after-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the drawer closes and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-after-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the drawer opens and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the drawer closes. Calling `event.preventDefault()` will prevent it from being closed.",
          "docsTags": []
        },
        {
          "event": "sl-overlay-dismiss",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the overlay is clicked. Calling `event.preventDefault()` will prevent the drawer from closing.",
          "docsTags": []
        },
        {
          "event": "sl-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the drawer opens. Calling `event.preventDefault()` will prevent it from being opened.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--size",
          "annotation": "prop",
          "docs": "The preferred size of the drawer. This will be applied to the drawer's width or height depending on its `placement`. Note that the drawer will shrink to accommodate smaller screens."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The drawer's content."
        },
        {
          "name": "footer",
          "docs": "The drawer's footer, usually one or more buttons representing various options."
        },
        {
          "name": "label",
          "docs": "The dialog's label. Alternatively, you can use the label prop."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "body",
          "docs": "The drawer body."
        },
        {
          "name": "close-button",
          "docs": "The close button."
        },
        {
          "name": "footer",
          "docs": "The drawer footer."
        },
        {
          "name": "header",
          "docs": "The drawer header."
        },
        {
          "name": "overlay",
          "docs": "The overlay."
        },
        {
          "name": "panel",
          "docs": "The drawer panel (where the drawer and its content is rendered)."
        },
        {
          "name": "title",
          "docs": "The drawer title."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-icon-button"
      ],
      "dependencyGraph": {
        "sl-drawer": [
          "sl-icon-button"
        ],
        "sl-icon-button": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/dropdown/dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "sl-dropdown",
      "readme": "# sl-dropdown\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "trigger - The dropdown's trigger, usually a `<sl-button>` element.",
          "name": "slot"
        },
        {
          "text": "- The dropdown's content.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "trigger - The container that wraps the trigger.",
          "name": "part"
        },
        {
          "text": "panel - The panel that gets shown when the dropdown is open.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "closeOnSelect",
          "type": "boolean",
          "mutable": false,
          "attr": "close-on-select",
          "reflectToAttr": false,
          "docs": "Determines whether the dropdown should hide when a menu item is selected.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "containingElement",
          "type": "HTMLElement",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The dropdown will close when the user interacts outside of this element (e.g. clicking).",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "distance",
          "type": "number",
          "mutable": false,
          "attr": "distance",
          "reflectToAttr": false,
          "docs": "The distance in pixels from which to offset the panel away from its trigger.",
          "docsTags": [],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hoist",
          "type": "boolean",
          "mutable": false,
          "attr": "hoist",
          "reflectToAttr": false,
          "docs": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
          "docsTags": [],
          "default": "'bottom-start'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "skidding",
          "type": "number",
          "mutable": false,
          "attr": "skidding",
          "reflectToAttr": false,
          "docs": "The distance in pixels from which to offset the panel along its trigger.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the dropdown panel",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the dropdown panel",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-after-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the dropdown closes and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-after-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the dropdown opens and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the dropdown closes. Calling `event.preventDefault()` will prevent it from being closed.",
          "docsTags": []
        },
        {
          "event": "sl-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the dropdown opens. Calling `event.preventDefault()` will prevent it from being opened.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The dropdown's content."
        },
        {
          "name": "trigger",
          "docs": "The dropdown's trigger, usually a `<sl-button>` element."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "panel",
          "docs": "The panel that gets shown when the dropdown is open."
        },
        {
          "name": "trigger",
          "docs": "The container that wraps the trigger."
        }
      ],
      "dependents": [
        "sl-color-picker",
        "sl-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "sl-color-picker": [
          "sl-dropdown"
        ],
        "sl-select": [
          "sl-dropdown"
        ]
      }
    },
    {
      "filePath": "./src/components/form/form.tsx",
      "encapsulation": "shadow",
      "tag": "sl-form",
      "readme": "# sl-form\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The form's content.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "novalidate",
          "type": "boolean",
          "mutable": false,
          "attr": "novalidate",
          "reflectToAttr": false,
          "docs": "Prevent the form from validating inputs before submitting.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getFormControls",
          "returns": {
            "type": "Promise<HTMLElement[]>",
            "docs": ""
          },
          "signature": "getFormControls() => Promise<HTMLElement[]>",
          "parameters": [],
          "docs": "Gets all form control elements (native and custom).",
          "docsTags": []
        },
        {
          "name": "getFormData",
          "returns": {
            "type": "Promise<FormData>",
            "docs": ""
          },
          "signature": "getFormData() => Promise<FormData>",
          "parameters": [],
          "docs": "Serializes all form controls elements and returns a `FormData` object.",
          "docsTags": []
        },
        {
          "name": "submit",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "submit() => Promise<boolean>",
          "parameters": [],
          "docs": "Submits the form. If all controls are valid, the `sl-submit` event will be emitted and the promise will resolve\nwith `true`. If any form control is invalid, the promise will resolve with `false` and no event will be emitted.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-submit",
          "detail": "{ formData: FormData; formControls: HTMLElement[]; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the form is submitted. This event will not be emitted if any form control inside of it is in an\ninvalid state, unless the form has the `novalidate` attribute. Note that there is never a need to prevent this\nevent, since it doen't send a GET or POST request like native forms. To \"prevent\" submission, use a conditional\naround the XHR request you use to submit the form's data with.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The form's content."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/format-bytes/format-bytes.tsx",
      "encapsulation": "shadow",
      "tag": "sl-format-bytes",
      "readme": "# sl-format-bytes\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "The locale to use when formatting the number.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "unit",
          "type": "\"bits\" | \"bytes\"",
          "mutable": false,
          "attr": "unit",
          "reflectToAttr": false,
          "docs": "The unit to display.",
          "docsTags": [],
          "default": "'bytes'",
          "values": [
            {
              "value": "bits",
              "type": "string"
            },
            {
              "value": "bytes",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The number to format in bytes.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/format-date/format-date.tsx",
      "encapsulation": "shadow",
      "tag": "sl-format-date",
      "readme": "# sl-format-number\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "date",
          "type": "Date | string",
          "mutable": false,
          "attr": "date",
          "reflectToAttr": false,
          "docs": "The date/time to format. If not set, the current date and time will be used.",
          "docsTags": [],
          "default": "new Date()",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "day",
          "type": "\"2-digit\" | \"numeric\"",
          "mutable": false,
          "attr": "day",
          "reflectToAttr": false,
          "docs": "The format for displaying the day.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "era",
          "type": "\"long\" | \"narrow\" | \"short\"",
          "mutable": false,
          "attr": "era",
          "reflectToAttr": false,
          "docs": "The format for displaying the era.",
          "docsTags": [],
          "values": [
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "narrow",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hour",
          "type": "\"2-digit\" | \"numeric\"",
          "mutable": false,
          "attr": "hour",
          "reflectToAttr": false,
          "docs": "The format for displaying the hour.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hourFormat",
          "type": "\"12\" | \"24\" | \"auto\"",
          "mutable": false,
          "attr": "hour-format",
          "reflectToAttr": false,
          "docs": "When set, 24 hour time will always be used.",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "value": "12",
              "type": "string"
            },
            {
              "value": "24",
              "type": "string"
            },
            {
              "value": "auto",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "The locale to use when formatting the date/time.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minute",
          "type": "\"2-digit\" | \"numeric\"",
          "mutable": false,
          "attr": "minute",
          "reflectToAttr": false,
          "docs": "The format for displaying the minute.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "month",
          "type": "\"2-digit\" | \"long\" | \"narrow\" | \"numeric\" | \"short\"",
          "mutable": false,
          "attr": "month",
          "reflectToAttr": false,
          "docs": "The format for displaying the month.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "narrow",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "second",
          "type": "\"2-digit\" | \"numeric\"",
          "mutable": false,
          "attr": "second",
          "reflectToAttr": false,
          "docs": "The format for displaying the second.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeZone",
          "type": "string",
          "mutable": false,
          "attr": "time-zone",
          "reflectToAttr": false,
          "docs": "The time zone to express the time in.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeZoneName",
          "type": "\"long\" | \"short\"",
          "mutable": false,
          "attr": "time-zone-name",
          "reflectToAttr": false,
          "docs": "The format for displaying the time.",
          "docsTags": [],
          "values": [
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "weekday",
          "type": "\"long\" | \"narrow\" | \"short\"",
          "mutable": false,
          "attr": "weekday",
          "reflectToAttr": false,
          "docs": "The format for displaying the weekday.",
          "docsTags": [],
          "values": [
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "narrow",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "year",
          "type": "\"2-digit\" | \"numeric\"",
          "mutable": false,
          "attr": "year",
          "reflectToAttr": false,
          "docs": "The format for displaying the year.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/format-number/format-number.tsx",
      "encapsulation": "shadow",
      "tag": "sl-format-number",
      "readme": "# sl-format-number\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "currency",
          "type": "string",
          "mutable": false,
          "attr": "currency",
          "reflectToAttr": false,
          "docs": "The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`.",
          "docsTags": [],
          "default": "'USD'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currencyDisplay",
          "type": "\"code\" | \"name\" | \"narrowSymbol\" | \"symbol\"",
          "mutable": false,
          "attr": "currency-display",
          "reflectToAttr": false,
          "docs": "How to display the currency.",
          "docsTags": [],
          "default": "'symbol'",
          "values": [
            {
              "value": "code",
              "type": "string"
            },
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "narrowSymbol",
              "type": "string"
            },
            {
              "value": "symbol",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "The locale to use when formatting the number.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maximumFractionDigits",
          "type": "number",
          "mutable": false,
          "attr": "maximum-fraction-digits",
          "reflectToAttr": false,
          "docs": "The maximum number of fraction digits to use. Possible values are 0 - 20.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number",
          "mutable": false,
          "attr": "maximum-significant-digits",
          "reflectToAttr": false,
          "docs": "The maximum number of significant digits to use,. Possible values are 1 - 21.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minimumFractionDigits",
          "type": "number",
          "mutable": false,
          "attr": "minimum-fraction-digits",
          "reflectToAttr": false,
          "docs": "The minimum number of fraction digits to use. Possible values are 0 - 20.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number",
          "mutable": false,
          "attr": "minimum-integer-digits",
          "reflectToAttr": false,
          "docs": "The minimum number of integer digits to use. Possible values are 1 - 21.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number",
          "mutable": false,
          "attr": "minimum-significant-digits",
          "reflectToAttr": false,
          "docs": "The minimum number of significant digits to use. Possible values are 1 - 21.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noGrouping",
          "type": "boolean",
          "mutable": false,
          "attr": "no-grouping",
          "reflectToAttr": false,
          "docs": "Turns off grouping separators.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"currency\" | \"decimal\" | \"percent\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The formatting style to use.",
          "docsTags": [],
          "default": "'decimal'",
          "values": [
            {
              "value": "currency",
              "type": "string"
            },
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "percent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The number to format.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/icon/icon.tsx",
      "encapsulation": "shadow",
      "tag": "sl-icon",
      "readme": "# sl-icon\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "An alternative description to use for accessibility. If omitted, the name or src will be used to generate it.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "library",
          "type": "string",
          "mutable": false,
          "attr": "library",
          "reflectToAttr": false,
          "docs": "The name of a registered custom icon library.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the icon to draw.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "An external URL of an SVG file.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "sl-error",
          "detail": "{ status?: number; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the icon failed to load.",
          "docsTags": []
        },
        {
          "event": "sl-load",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the icon has loaded.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [
        "sl-avatar",
        "sl-color-picker",
        "sl-details",
        "sl-icon-button",
        "sl-image-comparer",
        "sl-input",
        "sl-menu-item",
        "sl-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "sl-avatar": [
          "sl-icon"
        ],
        "sl-color-picker": [
          "sl-icon"
        ],
        "sl-details": [
          "sl-icon"
        ],
        "sl-icon-button": [
          "sl-icon"
        ],
        "sl-image-comparer": [
          "sl-icon"
        ],
        "sl-input": [
          "sl-icon"
        ],
        "sl-menu-item": [
          "sl-icon"
        ],
        "sl-select": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/icon-button/icon-button.tsx",
      "encapsulation": "shadow",
      "tag": "sl-icon-button",
      "readme": "# sl-icon-button\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Set to true to disable the button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": true,
          "docs": "A description that gets read by screen readers and other assistive devices. For optimal accessibility, you should\nalways include a label that describes what the icon button does.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "library",
          "type": "string",
          "mutable": false,
          "attr": "library",
          "reflectToAttr": true,
          "docs": "The name of a registered custom icon library.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The name of the icon to draw.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": true,
          "docs": "An external URL of an SVG file.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [
        "sl-alert",
        "sl-dialog",
        "sl-drawer",
        "sl-select",
        "sl-tab",
        "sl-tab-group",
        "sl-tag"
      ],
      "dependencies": [
        "sl-icon"
      ],
      "dependencyGraph": {
        "sl-icon-button": [
          "sl-icon"
        ],
        "sl-alert": [
          "sl-icon-button"
        ],
        "sl-dialog": [
          "sl-icon-button"
        ],
        "sl-drawer": [
          "sl-icon-button"
        ],
        "sl-select": [
          "sl-icon-button"
        ],
        "sl-tab": [
          "sl-icon-button"
        ],
        "sl-tab-group": [
          "sl-icon-button"
        ],
        "sl-tag": [
          "sl-icon-button"
        ]
      }
    },
    {
      "filePath": "./src/components/icon-library/icon-library.tsx",
      "encapsulation": "shadow",
      "tag": "sl-icon-library",
      "readme": "# sl-icon-library\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "mutator",
          "type": "(svg: SVGElement) => void",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A function that mutates the SVG element before it renders.",
          "docsTags": [],
          "values": [
            {
              "type": "(svg: SVGElement) => void"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the icon library.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resolver",
          "type": "(name: string) => string",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A function that translates an icon name to a URL where the corresponding SVG file exists The URL can be local or a\nCORS-enabled endpoint.",
          "docsTags": [],
          "values": [
            {
              "type": "(name: string) => string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/image-comparer/image-comparer.tsx",
      "encapsulation": "shadow",
      "tag": "sl-image-comparer",
      "readme": "# sl-image-comparer\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "before - The before image, an `<img>` or `<svg>` element.",
          "name": "slot"
        },
        {
          "text": "after - The after image, an `<img>` or `<svg>` element.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "before - The container that holds the \"before\" image.",
          "name": "part"
        },
        {
          "text": "after - The container that holds the \"after\" image.",
          "name": "part"
        },
        {
          "text": "divider - The divider that separates the images.",
          "name": "part"
        },
        {
          "text": "handle - The handle that the user drags to expose the after image.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "position",
          "type": "number",
          "mutable": true,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "The position of the divider as a percentage.",
          "docsTags": [],
          "default": "50",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "sl-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the slider position changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--divider-width",
          "annotation": "prop",
          "docs": "The width of the dividing line."
        },
        {
          "name": "--handle-size",
          "annotation": "prop",
          "docs": "The size of the compare handle."
        }
      ],
      "slots": [
        {
          "name": "after",
          "docs": "The after image, an `<img>` or `<svg>` element."
        },
        {
          "name": "before",
          "docs": "The before image, an `<img>` or `<svg>` element."
        }
      ],
      "parts": [
        {
          "name": "after",
          "docs": "The container that holds the \"after\" image."
        },
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "before",
          "docs": "The container that holds the \"before\" image."
        },
        {
          "name": "divider",
          "docs": "The divider that separates the images."
        },
        {
          "name": "handle",
          "docs": "The handle that the user drags to expose the after image."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-icon"
      ],
      "dependencyGraph": {
        "sl-image-comparer": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/include/include.tsx",
      "encapsulation": "shadow",
      "tag": "sl-include",
      "readme": "# sl-include\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "allowScripts",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-scripts",
          "reflectToAttr": false,
          "docs": "Allows included scripts to be executed. You must ensure the content you're including is trusted, otherwise this\noption can lead to XSS vulnerabilities in your app!",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"cors\" | \"no-cors\" | \"same-origin\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "The fetch mode to use.",
          "docsTags": [],
          "default": "'cors'",
          "values": [
            {
              "value": "cors",
              "type": "string"
            },
            {
              "value": "no-cors",
              "type": "string"
            },
            {
              "value": "same-origin",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "The location of the HTML file to include.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "sl-error",
          "detail": "{ status?: number; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the included file fails to load due to an error.",
          "docsTags": []
        },
        {
          "event": "sl-load",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the included file is loaded.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/input/input.tsx",
      "encapsulation": "shadow",
      "tag": "sl-input",
      "readme": "# sl-input\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "label - The input's label. Alternatively, you can use the label prop.",
          "name": "slot"
        },
        {
          "text": "prefix - Used to prepend an icon or similar element to the input.",
          "name": "slot"
        },
        {
          "text": "suffix - Used to append an icon or similar element to the input.",
          "name": "slot"
        },
        {
          "text": "clear-icon - An icon to use in lieu of the default clear icon.",
          "name": "slot"
        },
        {
          "text": "show-password-icon - An icon to use in lieu of the default show password icon.",
          "name": "slot"
        },
        {
          "text": "hide-password-icon - An icon to use in lieu of the default hide password icon.",
          "name": "slot"
        },
        {
          "text": "help-text - Help text that describes how to use the input. Alternatively, you can use the help-text prop.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "form-control - The form control that wraps the label, input, and help-text.",
          "name": "part"
        },
        {
          "text": "label - The input label.",
          "name": "part"
        },
        {
          "text": "input - The input control.",
          "name": "part"
        },
        {
          "text": "prefix - The input prefix container.",
          "name": "part"
        },
        {
          "text": "clear-button - The clear button.",
          "name": "part"
        },
        {
          "text": "password-toggle-button - The password toggle button.",
          "name": "part"
        },
        {
          "text": "suffix - The input suffix container.",
          "name": "part"
        },
        {
          "text": "help-text - The input help text.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "The input's autocaptialize attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "string",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "The input's autocomplete attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocorrect",
          "type": "string",
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "The input's autocorrect attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "The input's autofocus attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "Set to true to add a clear button when the input is populated.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Set to true to disable the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "The input's help text. Alternatively, you can use the help-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "The input's inputmode attribute.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The input's label. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": true,
          "docs": "The input's maximum value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": true,
          "docs": "The maximum length of input that will be considered valid.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": true,
          "docs": "The input's minimum value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": true,
          "docs": "The minimum length of input that will be considered valid.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The input's name attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": true,
          "docs": "A pattern to validate input against.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": true,
          "docs": "Set to true to draw a pill-style input with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input's placeholder text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "Set to true to make the input readonly.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "Set to true to make the input a required field.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The input's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "Enables spell checking on the input.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": true,
          "docs": "The input's step attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "togglePassword",
          "type": "boolean",
          "mutable": false,
          "attr": "toggle-password",
          "reflectToAttr": false,
          "docs": "Set to true to add a password toggle button for password inputs.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The input's type.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The input's value attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the input.",
          "docsTags": []
        },
        {
          "name": "reportValidity",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "reportValidity() => Promise<boolean>",
          "parameters": [],
          "docs": "Checks for validity and shows the browser's validation message if the control is invalid.",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "select() => Promise<void>",
          "parameters": [],
          "docs": "Selects all the text in the input.",
          "docsTags": []
        },
        {
          "name": "setCustomValidity",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setCustomValidity(message: string) => Promise<void>",
          "parameters": [],
          "docs": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the input.",
          "docsTags": []
        },
        {
          "name": "setRangeText",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setRangeText(replacement: string, start: number, end: number, selectMode?: 'select' | 'start' | 'end' | 'preserve') => Promise<void>",
          "parameters": [],
          "docs": "Replaces a range of text with a new string.",
          "docsTags": []
        },
        {
          "name": "setSelectionRange",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setSelectionRange(selectionStart: number, selectionEnd: number, selectionDirection?: 'forward' | 'backward' | 'none') => Promise<void>",
          "parameters": [],
          "docs": "Sets the start and end positions of the text selection (0-based).",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-blur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": []
        },
        {
          "event": "sl-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control's value changes.",
          "docsTags": []
        },
        {
          "event": "sl-clear",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the clear button is activated.",
          "docsTags": []
        },
        {
          "event": "sl-focus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": []
        },
        {
          "event": "sl-input",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control receives input.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--focus-ring",
          "annotation": "prop",
          "docs": "The focus ring style to use when the control receives focus, a `box-shadow` property."
        }
      ],
      "slots": [
        {
          "name": "clear-icon",
          "docs": "An icon to use in lieu of the default clear icon."
        },
        {
          "name": "help-text",
          "docs": "Help text that describes how to use the input. Alternatively, you can use the help-text prop."
        },
        {
          "name": "hide-password-icon",
          "docs": "An icon to use in lieu of the default hide password icon."
        },
        {
          "name": "label",
          "docs": "The input's label. Alternatively, you can use the label prop."
        },
        {
          "name": "prefix",
          "docs": "Used to prepend an icon or similar element to the input."
        },
        {
          "name": "show-password-icon",
          "docs": "An icon to use in lieu of the default show password icon."
        },
        {
          "name": "suffix",
          "docs": "Used to append an icon or similar element to the input."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "clear-button",
          "docs": "The clear button."
        },
        {
          "name": "form-control",
          "docs": "The form control that wraps the label, input, and help-text."
        },
        {
          "name": "help-text",
          "docs": "The input help text."
        },
        {
          "name": "input",
          "docs": "The input control."
        },
        {
          "name": "label",
          "docs": "The input label."
        },
        {
          "name": "password-toggle-button",
          "docs": "The password toggle button."
        },
        {
          "name": "prefix",
          "docs": "The input prefix container."
        },
        {
          "name": "suffix",
          "docs": "The input suffix container."
        }
      ],
      "dependents": [
        "sl-color-picker"
      ],
      "dependencies": [
        "sl-icon"
      ],
      "dependencyGraph": {
        "sl-input": [
          "sl-icon"
        ],
        "sl-color-picker": [
          "sl-input"
        ]
      }
    },
    {
      "filePath": "./src/components/menu/menu.tsx",
      "encapsulation": "shadow",
      "tag": "sl-menu",
      "readme": "# sl-menu\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The menu's content, including menu items, menu dividers, and menu labels.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "typeToSelect",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "typeToSelect(key: string) => Promise<void>",
          "parameters": [],
          "docs": "Initiates type-to-select logic, which automatically selects an option based on what the user is currently typing.\nThe key passed will be appended to the internal query and the selection will be updated. After a brief period, the\ninternal query is cleared automatically. This method is intended to be used with the keydown event. Useful for\nenabling type-to-select when the menu doesn't have focus.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-select",
          "detail": "{ item: HTMLSlMenuItemElement; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a menu item is selected.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The menu's content, including menu items, menu dividers, and menu labels."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [
        "sl-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "sl-select": [
          "sl-menu"
        ]
      }
    },
    {
      "filePath": "./src/components/menu-divider/menu-divider.tsx",
      "encapsulation": "shadow",
      "tag": "sl-menu-divider",
      "readme": "# sl-menu-divider\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/menu-item/menu-item.tsx",
      "encapsulation": "shadow",
      "tag": "sl-menu-item",
      "readme": "# sl-menu-item\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The menu item's label.",
          "name": "slot"
        },
        {
          "text": "prefix - Used to prepend an icon or similar element to the menu item.",
          "name": "slot"
        },
        {
          "text": "suffix - Used to append an icon or similar element to the menu item.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "checked-icon - The container that wraps the checked icon.",
          "name": "part"
        },
        {
          "text": "prefix - The prefix container.",
          "name": "part"
        },
        {
          "text": "label - The menu item label.",
          "name": "part"
        },
        {
          "text": "suffix - The suffix container.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Set to true to draw the item in a checked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Set to true to draw the menu item in a disabled state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "A unique value to store in the menu item.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the button.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the button.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The menu item's label."
        },
        {
          "name": "prefix",
          "docs": "Used to prepend an icon or similar element to the menu item."
        },
        {
          "name": "suffix",
          "docs": "Used to append an icon or similar element to the menu item."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "checked-icon",
          "docs": "The container that wraps the checked icon."
        },
        {
          "name": "label",
          "docs": "The menu item label."
        },
        {
          "name": "prefix",
          "docs": "The prefix container."
        },
        {
          "name": "suffix",
          "docs": "The suffix container."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-icon"
      ],
      "dependencyGraph": {
        "sl-menu-item": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/menu-label/menu-label.tsx",
      "encapsulation": "shadow",
      "tag": "sl-menu-label",
      "readme": "# sl-menu-label\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The menu label's content.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The menu label's content."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/progress-bar/progress-bar.tsx",
      "encapsulation": "shadow",
      "tag": "sl-progress-bar",
      "readme": "# sl-progress-bar\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- A label to show inside the indicator.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "indicator - The progress bar indicator.",
          "name": "part"
        },
        {
          "text": "label - The progress bar label.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "percentage",
          "type": "number",
          "mutable": false,
          "attr": "percentage",
          "reflectToAttr": false,
          "docs": "The progress bar's percentage, 0 to 100.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "The progress bar's height."
        },
        {
          "name": "--indicator-color",
          "annotation": "prop",
          "docs": "The indicator color."
        },
        {
          "name": "--label-color",
          "annotation": "prop",
          "docs": "The label color."
        },
        {
          "name": "--track-color",
          "annotation": "prop",
          "docs": "The track color."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A label to show inside the indicator."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "indicator",
          "docs": "The progress bar indicator."
        },
        {
          "name": "label",
          "docs": "The progress bar label."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/progress-ring/progress-ring.tsx",
      "encapsulation": "shadow",
      "tag": "sl-progress-ring",
      "readme": "# sl-progress-ring\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- A label to show inside the ring.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "label - The progress ring label.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "percentage",
          "type": "number",
          "mutable": false,
          "attr": "percentage",
          "reflectToAttr": false,
          "docs": "The current progress percentage, 0 - 100.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the progress ring in pixels.",
          "docsTags": [],
          "default": "128",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "strokeWidth",
          "type": "number",
          "mutable": false,
          "attr": "stroke-width",
          "reflectToAttr": false,
          "docs": "The stroke width of the progress ring in pixels.",
          "docsTags": [],
          "default": "4",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--indicator-color",
          "annotation": "prop",
          "docs": "The indicator color."
        },
        {
          "name": "--track-color",
          "annotation": "prop",
          "docs": "The track color."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "A label to show inside the ring."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "label",
          "docs": "The progress ring label."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/radio/radio.tsx",
      "encapsulation": "shadow",
      "tag": "sl-radio",
      "readme": "# sl-radio\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The radio's label.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "control - The radio control.",
          "name": "part"
        },
        {
          "text": "checked-icon - The container the wraps the checked icon.",
          "name": "part"
        },
        {
          "text": "label - The radio label.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Set to true to draw the radio in a checked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the radio.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "This will be true when the control is in an invalid state. Validity in range inputs is determined by the message\nprovided by the `setCustomValidity` method.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The radio's name attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The radio's value attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the radio.",
          "docsTags": []
        },
        {
          "name": "reportValidity",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "reportValidity() => Promise<boolean>",
          "parameters": [],
          "docs": "Checks for validity and shows the browser's validation message if the control is invalid.",
          "docsTags": []
        },
        {
          "name": "setCustomValidity",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setCustomValidity(message: string) => Promise<void>",
          "parameters": [],
          "docs": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the radio.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-blur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": []
        },
        {
          "event": "sl-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control's checked state changes.",
          "docsTags": []
        },
        {
          "event": "sl-focus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The radio's label."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "checked-icon",
          "docs": "The container the wraps the checked icon."
        },
        {
          "name": "control",
          "docs": "The radio control."
        },
        {
          "name": "label",
          "docs": "The radio label."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/range/range.tsx",
      "encapsulation": "shadow",
      "tag": "sl-range",
      "readme": "# sl-range\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "input - The native range input.",
          "name": "part"
        },
        {
          "text": "tooltip - The range tooltip.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "This will be true when the control is in an invalid state. Validity in range inputs is determined by the message\nprovided by the `setCustomValidity` method.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The input's max attribute.",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The input's min attribute.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input's name attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "The input's step attribute.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "\"bottom\" | \"none\" | \"top\"",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "The preferred placedment of the tooltip.",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipFormatter",
          "type": "(value: number) => string",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A function used to format the tooltip's value.",
          "docsTags": [],
          "default": "(value: number) => value.toString()",
          "values": [
            {
              "type": "(value: number) => string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input's value attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the input.",
          "docsTags": []
        },
        {
          "name": "setCustomValidity",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setCustomValidity(message: string) => Promise<void>",
          "parameters": [],
          "docs": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the input.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-blur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": []
        },
        {
          "event": "sl-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control's value changes.",
          "docsTags": []
        },
        {
          "event": "sl-focus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "input",
          "docs": "The native range input."
        },
        {
          "name": "tooltip",
          "docs": "The range tooltip."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/rating/rating.tsx",
      "encapsulation": "shadow",
      "tag": "sl-rating",
      "readme": "# sl-rating\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the rating.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "getSymbol",
          "type": "(value?: number) => string",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "A function that returns the symbols to display. Accepts an option `value` parameter you can use to map a specific\nsymbol to a value.",
          "docsTags": [],
          "default": "(value?: number) => '<sl-icon name=\"star-fill\"></sl-icon>'",
          "values": [
            {
              "type": "(value?: number) => string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The highest rating to show.",
          "docsTags": [],
          "default": "5",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "precision",
          "type": "number",
          "mutable": false,
          "attr": "precision",
          "reflectToAttr": false,
          "docs": "The minimum increment value allowed by the control.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Makes the rating readonly.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The current rating.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the rating.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the rating.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the rating's value changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--symbol-color",
          "annotation": "prop",
          "docs": "The inactive color for symbols."
        },
        {
          "name": "--symbol-color-active",
          "annotation": "prop",
          "docs": "The active color for symbols."
        },
        {
          "name": "--symbol-size",
          "annotation": "prop",
          "docs": "The size of symbols."
        },
        {
          "name": "--symbol-spacing",
          "annotation": "prop",
          "docs": "The spacing to use around symbols."
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/relative-time/relative-time.tsx",
      "encapsulation": "shadow",
      "tag": "sl-relative-time",
      "readme": "# sl-relative-time\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "date",
          "type": "Date | string",
          "mutable": false,
          "attr": "date",
          "reflectToAttr": false,
          "docs": "The date from which to calculate time from.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"long\" | \"narrow\" | \"short\"",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "The formatting style to use.",
          "docsTags": [],
          "default": "'long'",
          "values": [
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "narrow",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "The locale to use when formatting the number.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numeric",
          "type": "\"always\" | \"auto\"",
          "mutable": false,
          "attr": "numeric",
          "reflectToAttr": false,
          "docs": "When `auto`, values such as \"yesterday\" and \"tomorrow\" will be shown when possible. When `always`, values such as\n\"1 day ago\" and \"in 1 day\" will be shown.",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "value": "always",
              "type": "string"
            },
            {
              "value": "auto",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sync",
          "type": "boolean",
          "mutable": false,
          "attr": "sync",
          "reflectToAttr": false,
          "docs": "Keep the displayed value up to date as time passes.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/resize-observer/resize-observer.tsx",
      "encapsulation": "shadow",
      "tag": "sl-resize-observer",
      "readme": "# sl-resize-observer\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "experimental",
          "name": "status"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [
        {
          "event": "sl-resize",
          "detail": "readonly ResizeObserverEntry[]",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the element is resized.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/responsive-embed/responsive-embed.tsx",
      "encapsulation": "shadow",
      "tag": "sl-responsive-embed",
      "readme": "# sl-responsive-embed\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "aspectRatio",
          "type": "string",
          "mutable": false,
          "attr": "aspect-ratio",
          "reflectToAttr": false,
          "docs": "The aspect ratio of the embedded media in the format of `width:height`, e.g. `16:9`, `4:3`, or `1:1`. Ratios not in\nthis format will be ignored.",
          "docsTags": [],
          "default": "'16:9'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/select/select.tsx",
      "encapsulation": "shadow",
      "tag": "sl-select",
      "readme": "# sl-select\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The select's options in the form of menu items.",
          "name": "slot"
        },
        {
          "text": "label - The select's label. Alternatively, you can use the label prop.",
          "name": "slot"
        },
        {
          "text": "help-text - Help text that describes how to use the select.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "clear-button - The input's clear button, exported from <sl-input>.",
          "name": "part"
        },
        {
          "text": "form-control - The form control that wraps the label, input, and help text.",
          "name": "part"
        },
        {
          "text": "help-text - The select's help text.",
          "name": "part"
        },
        {
          "text": "icon - The select's icon.",
          "name": "part"
        },
        {
          "text": "label - The select's label.",
          "name": "part"
        },
        {
          "text": "menu - The select menu, a <sl-menu> element.",
          "name": "part"
        },
        {
          "text": "tag - The multiselect option, a <sl-tag> element.",
          "name": "part"
        },
        {
          "text": "tags - The container in which multiselect options are rendered.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "Set to true to add a clear button when the select is populated.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the select control.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "The select's help text. Alternatively, you can use the help-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hoist",
          "type": "boolean",
          "mutable": false,
          "attr": "hoist",
          "reflectToAttr": false,
          "docs": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The select's label. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxTagsVisible",
          "type": "number",
          "mutable": false,
          "attr": "max-tags-visible",
          "reflectToAttr": false,
          "docs": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit.",
          "docsTags": [],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Set to true to enable multiselect.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The select's name.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": false,
          "docs": "Set to true to draw a pill-style select with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The select's placeholder text.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "The select's required attribute.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The select's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string | string[]",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the control. This will be a string or an array depending on `multiple`.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "reportValidity",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "reportValidity() => Promise<boolean>",
          "parameters": [],
          "docs": "Checks for validity and shows the browser's validation message if the control is invalid.",
          "docsTags": []
        },
        {
          "name": "setCustomValidity",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setCustomValidity(message: string) => Promise<void>",
          "parameters": [],
          "docs": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-blur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": []
        },
        {
          "event": "sl-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control's value changes.",
          "docsTags": []
        },
        {
          "event": "sl-focus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--focus-ring",
          "annotation": "prop",
          "docs": "The focus ring style to use when the control receives focus, a `box-shadow` property."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The select's options in the form of menu items."
        },
        {
          "name": "help-text",
          "docs": "Help text that describes how to use the select."
        },
        {
          "name": "label",
          "docs": "The select's label. Alternatively, you can use the label prop."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "clear-button",
          "docs": "The input's clear button, exported from <sl-input>."
        },
        {
          "name": "form-control",
          "docs": "The form control that wraps the label, input, and help text."
        },
        {
          "name": "help-text",
          "docs": "The select's help text."
        },
        {
          "name": "icon",
          "docs": "The select's icon."
        },
        {
          "name": "label",
          "docs": "The select's label."
        },
        {
          "name": "menu",
          "docs": "The select menu, a <sl-menu> element."
        },
        {
          "name": "tag",
          "docs": "The multiselect option, a <sl-tag> element."
        },
        {
          "name": "tags",
          "docs": "The container in which multiselect options are rendered."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-tag",
        "sl-dropdown",
        "sl-icon-button",
        "sl-icon",
        "sl-menu"
      ],
      "dependencyGraph": {
        "sl-select": [
          "sl-tag",
          "sl-dropdown",
          "sl-icon-button",
          "sl-icon",
          "sl-menu"
        ],
        "sl-tag": [
          "sl-icon-button"
        ],
        "sl-icon-button": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/skeleton/skeleton.tsx",
      "encapsulation": "shadow",
      "tag": "sl-skeleton",
      "readme": "# sl-skeleton\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "indicator - The skeleton's indicator which is responsible for its color and animation.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "effect",
          "type": "\"none\" | \"pulse\" | \"sheen\"",
          "mutable": false,
          "attr": "effect",
          "reflectToAttr": false,
          "docs": "Determines which effect the skeleton will use.",
          "docsTags": [],
          "default": "'sheen'",
          "values": [
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "pulse",
              "type": "string"
            },
            {
              "value": "sheen",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--border-radius",
          "annotation": "prop",
          "docs": "The skeleton's border radius."
        },
        {
          "name": "--color",
          "annotation": "prop",
          "docs": "The color of the skeleton."
        },
        {
          "name": "--sheen-color",
          "annotation": "prop",
          "docs": "The sheen color when the skeleton is in its loading state."
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "indicator",
          "docs": "The skeleton's indicator which is responsible for its color and animation."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/spinner/spinner.tsx",
      "encapsulation": "shadow",
      "tag": "sl-spinner",
      "readme": "# sl-spinner\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--indicator-color",
          "annotation": "prop",
          "docs": "The color of the spinner's indicator."
        },
        {
          "name": "--stroke-width",
          "annotation": "prop",
          "docs": "The width of the indicator."
        },
        {
          "name": "--track-color",
          "annotation": "prop",
          "docs": "The color of the spinner's track."
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [
        "sl-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "sl-button": [
          "sl-spinner"
        ]
      }
    },
    {
      "filePath": "./src/components/switch/switch.tsx",
      "encapsulation": "shadow",
      "tag": "sl-switch",
      "readme": "# sl-switch\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The switch's label.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "control - The switch control.",
          "name": "part"
        },
        {
          "text": "thumb - The switch position indicator.",
          "name": "part"
        },
        {
          "text": "label - The switch label.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Set to true to draw the switch in a checked state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the switch.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The switch's name attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Set to true to make the switch a required field.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The switch's value attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the switch.",
          "docsTags": []
        },
        {
          "name": "reportValidity",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "reportValidity() => Promise<boolean>",
          "parameters": [],
          "docs": "Checks for validity and shows the browser's validation message if the control is invalid.",
          "docsTags": []
        },
        {
          "name": "setCustomValidity",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setCustomValidity(message: string) => Promise<void>",
          "parameters": [],
          "docs": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the switch.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-blur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": []
        },
        {
          "event": "sl-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control's checked state changes.",
          "docsTags": []
        },
        {
          "event": "sl-focus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--height",
          "annotation": "prop",
          "docs": "The height of the switch."
        },
        {
          "name": "--thumb-size",
          "annotation": "prop",
          "docs": "The size of the thumb."
        },
        {
          "name": "--width",
          "annotation": "prop",
          "docs": "The width of the switch."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The switch's label."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "control",
          "docs": "The switch control."
        },
        {
          "name": "label",
          "docs": "The switch label."
        },
        {
          "name": "thumb",
          "docs": "The switch position indicator."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tab/tab.tsx",
      "encapsulation": "shadow",
      "tag": "sl-tab",
      "readme": "# sl-tab\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The tab's label.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Set to true to draw the tab in an active state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closable",
          "type": "boolean",
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "When true, the tab will be rendered with a close icon.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Set to true to draw the tab in a disabled state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panel",
          "type": "string",
          "mutable": false,
          "attr": "panel",
          "reflectToAttr": true,
          "docs": "The name of the tab panel the tab will control. The panel must be located in the same tab group.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus from the tab.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus to the tab.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-close",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the tab is closable and the close button is activated.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--focus-ring",
          "annotation": "prop",
          "docs": "The focus ring's box shadow."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The tab's label."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-icon-button"
      ],
      "dependencyGraph": {
        "sl-tab": [
          "sl-icon-button"
        ],
        "sl-icon-button": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/tab-group/tab-group.tsx",
      "encapsulation": "shadow",
      "tag": "sl-tab-group",
      "readme": "# sl-tab-group\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "nav - Used for grouping tabs in the tab group.",
          "name": "slot"
        },
        {
          "text": "- Used for grouping tab panels in the tab group.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "nav - The tab group navigation container.",
          "name": "part"
        },
        {
          "text": "tabs - The container that wraps the slotted tabs.",
          "name": "part"
        },
        {
          "text": "active-tab-indicator - An element that displays the currently selected tab. This is a child of the tabs container.",
          "name": "part"
        },
        {
          "text": "body - The tab group body where tab panels are slotted in.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "noScrollControls",
          "type": "boolean",
          "mutable": false,
          "attr": "no-scroll-controls",
          "reflectToAttr": false,
          "docs": "Disables the scroll arrows that appear when tabs overflow.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "The placement of the tabs.",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show(panel: string) => Promise<void>",
          "parameters": [],
          "docs": "Shows the specified tab panel.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-tab-hide",
          "detail": "{ name: string; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a tab is hidden.",
          "docsTags": []
        },
        {
          "event": "sl-tab-show",
          "detail": "{ name: string; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a tab is shown.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--tabs-border-color",
          "annotation": "prop",
          "docs": "The color of the border that separates tabs."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Used for grouping tab panels in the tab group."
        },
        {
          "name": "nav",
          "docs": "Used for grouping tabs in the tab group."
        }
      ],
      "parts": [
        {
          "name": "active-tab-indicator",
          "docs": "An element that displays the currently selected tab. This is a child of the tabs container."
        },
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "body",
          "docs": "The tab group body where tab panels are slotted in."
        },
        {
          "name": "nav",
          "docs": "The tab group navigation container."
        },
        {
          "name": "tabs",
          "docs": "The container that wraps the slotted tabs."
        }
      ],
      "dependents": [],
      "dependencies": [
        "sl-icon-button"
      ],
      "dependencyGraph": {
        "sl-tab-group": [
          "sl-icon-button"
        ],
        "sl-icon-button": [
          "sl-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/tab-panel/tab-panel.tsx",
      "encapsulation": "shadow",
      "tag": "sl-tab-panel",
      "readme": "# sl-tab-panel\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The tab panel's content.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "When true, the tab panel will be shown.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The tab panel's name.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The tab panel's content."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tag/tag.tsx",
      "encapsulation": "shadow",
      "tag": "sl-tag",
      "readme": "# sl-tag\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The tag's content.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "content - The tag content.",
          "name": "part"
        },
        {
          "text": "clear-button - The clear button.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": true,
          "docs": "Set to true to make the tag clearable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pill",
          "type": "boolean",
          "mutable": false,
          "attr": "pill",
          "reflectToAttr": true,
          "docs": "Set to true to draw a pill-style tag with rounded edges.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The tag's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"danger\" | \"info\" | \"primary\" | \"success\" | \"text\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "The tag's type.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "sl-clear",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the clear button is activated.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "The tag's content."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "clear-button",
          "docs": "The clear button."
        },
        {
          "name": "content",
          "docs": "The tag content."
        }
      ],
      "dependents": [
        "sl-select"
      ],
      "dependencies": [
        "sl-icon-button"
      ],
      "dependencyGraph": {
        "sl-tag": [
          "sl-icon-button"
        ],
        "sl-icon-button": [
          "sl-icon"
        ],
        "sl-select": [
          "sl-tag"
        ]
      }
    },
    {
      "filePath": "./src/components/textarea/textarea.tsx",
      "encapsulation": "shadow",
      "tag": "sl-textarea",
      "readme": "# sl-textarea\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "label - The textarea's label. Alternatively, you can use the label prop.",
          "name": "slot"
        },
        {
          "text": "help-text - Help text that describes how to use the input.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        },
        {
          "text": "form-control - The form control that wraps the label, textarea, and help text.",
          "name": "part"
        },
        {
          "text": "label - The textarea label.",
          "name": "part"
        },
        {
          "text": "textarea - The textarea control.",
          "name": "part"
        },
        {
          "text": "help-text - The textarea help text.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "The textarea's autocaptialize attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "string",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "The textarea's autocomplete attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocorrect",
          "type": "string",
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "The textarea's autocorrect attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "The textarea's autofocus attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Set to true to disable the textarea.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "The textarea's help text. Alternatively, you can use the help-text slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "The textarea's inputmode attribute.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": true,
          "docs": "This will be true when the control is in an invalid state. Validity is determined by props such as `required`,\n`minlength`, and `maxlength` using the browser's constraint validation API.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The textarea's label. Alternatively, you can use the label slot.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": true,
          "docs": "The maximum length of input that will be considered valid.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": true,
          "docs": "The minimum length of input that will be considered valid.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The textarea's name attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The textarea's placeholder text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "Set to true for a readonly textarea.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "The textarea's required attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resize",
          "type": "\"auto\" | \"none\" | \"vertical\"",
          "mutable": false,
          "attr": "resize",
          "reflectToAttr": false,
          "docs": "Controls how the textarea can be resized.",
          "docsTags": [],
          "default": "'vertical'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "The number of rows to display by default.",
          "docsTags": [],
          "default": "4",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The textarea's size.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spellcheck",
          "type": "boolean",
          "mutable": false,
          "attr": "spellcheck",
          "reflectToAttr": false,
          "docs": "The textarea's spellcheck attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "The textarea's value attribute.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "removeFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "removeFocus() => Promise<void>",
          "parameters": [],
          "docs": "Removes focus fromt the textarea.",
          "docsTags": []
        },
        {
          "name": "reportValidity",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "reportValidity() => Promise<boolean>",
          "parameters": [],
          "docs": "Checks for validity and shows the browser's validation message if the control is invalid.",
          "docsTags": []
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "select() => Promise<void>",
          "parameters": [],
          "docs": "Selects all the text in the input.",
          "docsTags": []
        },
        {
          "name": "setCustomValidity",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setCustomValidity(message: string) => Promise<void>",
          "parameters": [],
          "docs": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the textarea.",
          "docsTags": []
        },
        {
          "name": "setRangeText",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setRangeText(replacement: string, start: number, end: number, selectMode?: 'select' | 'start' | 'end' | 'preserve') => Promise<void>",
          "parameters": [],
          "docs": "Replaces a range of text with a new string.",
          "docsTags": []
        },
        {
          "name": "setSelectionRange",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setSelectionRange(selectionStart: number, selectionEnd: number, selectionDirection?: 'forward' | 'backward' | 'none') => Promise<void>",
          "parameters": [],
          "docs": "Sets the start and end positions of the text selection (0-based).",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-blur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control loses focus.",
          "docsTags": []
        },
        {
          "event": "sl-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control's value changes.",
          "docsTags": []
        },
        {
          "event": "sl-focus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control gains focus.",
          "docsTags": []
        },
        {
          "event": "sl-input",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the control receives input.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "help-text",
          "docs": "Help text that describes how to use the input."
        },
        {
          "name": "label",
          "docs": "The textarea's label. Alternatively, you can use the label prop."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        },
        {
          "name": "form-control",
          "docs": "The form control that wraps the label, textarea, and help text."
        },
        {
          "name": "help-text",
          "docs": "The textarea help text."
        },
        {
          "name": "label",
          "docs": "The textarea label."
        },
        {
          "name": "textarea",
          "docs": "The textarea control."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/theme/theme.tsx",
      "encapsulation": "shadow",
      "tag": "sl-theme",
      "readme": "# sl-theme\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "experimental",
          "name": "status"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the theme to use. The user is responsible for including the associated stylesheet(s). Supportive themes\nmust adhere to theme guidelines by exposing a class that follows the `sl-theme-{name}` convention.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tooltip/tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "sl-tooltip",
      "readme": "# sl-tooltip\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "2.0",
          "name": "since"
        },
        {
          "text": "stable",
          "name": "status"
        },
        {
          "text": "- The tooltip's target element. Only the first element will be used as the target.",
          "name": "slot"
        },
        {
          "text": "base - The component's base wrapper.",
          "name": "part"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "content",
          "type": "string",
          "mutable": false,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "The tooltip's content.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set to true to disable the tooltip so it won't show when triggered.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "distance",
          "type": "number",
          "mutable": false,
          "attr": "distance",
          "reflectToAttr": false,
          "docs": "The distance in pixels from which to offset the tooltip away from its target.",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip\ninside of the viewport.",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "skidding",
          "type": "number",
          "mutable": false,
          "attr": "skidding",
          "reflectToAttr": false,
          "docs": "The distance in pixels from which to offset the tooltip along its target.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "string",
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple\noptions can be passed by separating them with a space. When manual is used, the tooltip must be activated\nprogrammatically.",
          "docsTags": [],
          "default": "'hover focus'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Shows the tooltip.",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Shows the tooltip.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "sl-after-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the tooltip has hidden and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-aftershow",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted after the tooltip has shown and all transitions are complete.",
          "docsTags": []
        },
        {
          "event": "sl-hide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the tooltip begins to hide. Calling `event.preventDefault()` will prevent it from being hidden.",
          "docsTags": []
        },
        {
          "event": "sl-show",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the tooltip begins to show. Calling `event.preventDefault()` will prevent it from being shown.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--hide-delay",
          "annotation": "prop",
          "docs": "The amount of time to wait before hiding the tooltip."
        },
        {
          "name": "--hide-duration",
          "annotation": "prop",
          "docs": "The amount of time the hide transition takes to complete."
        },
        {
          "name": "--hide-timing-function",
          "annotation": "prop",
          "docs": "The timing function (easing) to use for the hide transition."
        },
        {
          "name": "--max-width",
          "annotation": "prop",
          "docs": "The maximum width of the tooltip."
        },
        {
          "name": "--show-delay",
          "annotation": "prop",
          "docs": "The amount of time to wait before showing the tooltip."
        },
        {
          "name": "--show-duration",
          "annotation": "prop",
          "docs": "The amount of time the show transition takes to complete."
        },
        {
          "name": "--show-timing-function",
          "annotation": "prop",
          "docs": "The timing function (easing) to use for the show transition."
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "The tooltip's target element. Only the first element will be used as the target."
        }
      ],
      "parts": [
        {
          "name": "base",
          "docs": "The component's base wrapper."
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ],
  "version": "2.0.0-beta.25"
}