import { Component, Element, Event, Method, Prop, State, Watch, h } from '@stencil/core';
import { getOffset } from '../../utilities/offset';
import { scrollIntoView } from '../../utilities/scroll';
import { focusVisible } from '../../utilities/focus-visible';
/**
 * @since 2.0
 * @status stable
 *
 * @slot nav - Used for grouping tabs in the tab group.
 * @slot - Used for grouping tab panels in the tab group.
 *
 * @part base - The component's base wrapper.
 * @part nav - The tab group navigation container.
 * @part tabs - The container that wraps the slotted tabs.
 * @part active-tab-indicator - An element that displays the currently selected tab. This is a child of the tabs container.
 * @part body - The tab group body where tab panels are slotted in.
 */
export class TabGroup {
  constructor() {
    this.hasScrollControls = false;
    /** The placement of the tabs. */
    this.placement = 'top';
    /** Disables the scroll arrows that appear when tabs overflow. */
    this.noScrollControls = false;
  }
  handlePlacementChange() {
    this.syncActiveTabIndicator();
  }
  handleNoScrollControlsChange() {
    this.updateScrollControls();
  }
  connectedCallback() {
    this.handleClick = this.handleClick.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleScrollLeft = this.handleScrollLeft.bind(this);
    this.handleScrollRight = this.handleScrollRight.bind(this);
  }
  componentDidLoad() {
    // Set initial tab state when the tabs first become visible
    const observer = new IntersectionObserver((entries, observer) => {
      if (entries[0].intersectionRatio > 0) {
        this.setAriaLabels();
        this.setActiveTab(this.getActiveTab() || this.getAllTabs()[0], false);
        observer.unobserve(entries[0].target);
      }
    });
    observer.observe(this.host);
    focusVisible.observe(this.tabGroup);
    this.resizeObserver = new ResizeObserver(() => this.updateScrollControls());
    this.resizeObserver.observe(this.nav);
    requestAnimationFrame(() => this.updateScrollControls());
    // Update aria labels if the DOM changes
    this.mutationObserver = new MutationObserver(mutations => {
      if (mutations.some(mutation => {
        return !['aria-labelledby', 'aria-controls'].includes(mutation.attributeName);
      })) {
        setTimeout(() => this.setAriaLabels());
      }
    });
    this.mutationObserver.observe(this.host, { attributes: true, childList: true, subtree: true });
  }
  disconnectedCallback() {
    this.mutationObserver.disconnect();
    focusVisible.unobserve(this.tabGroup);
    this.resizeObserver.unobserve(this.nav);
  }
  /** Shows the specified tab panel. */
  async show(panel) {
    const tabs = this.getAllTabs();
    const tab = tabs.find(el => el.panel === panel);
    if (tab) {
      this.setActiveTab(tab);
    }
  }
  getAllTabs(includeDisabled = false) {
    const slot = this.tabs.querySelector('slot');
    return [...slot.assignedElements()].filter((el) => {
      return includeDisabled
        ? el.tagName.toLowerCase() === 'sl-tab'
        : el.tagName.toLowerCase() === 'sl-tab' && !el.disabled;
    });
  }
  getAllPanels() {
    const slot = this.body.querySelector('slot');
    return [...slot.assignedElements()].filter((el) => el.tagName.toLowerCase() === 'sl-tab-panel');
  }
  getActiveTab() {
    return this.getAllTabs().find(el => el.active);
  }
  handleClick(event) {
    const target = event.target;
    const tab = target.closest('sl-tab');
    if (tab) {
      this.setActiveTab(tab);
    }
  }
  handleKeyDown(event) {
    // Activate a tab
    if (['Enter', ' '].includes(event.key)) {
      const target = event.target;
      const tab = target.closest('sl-tab');
      if (tab) {
        this.setActiveTab(tab);
        event.preventDefault();
      }
    }
    // Move focus left or right
    if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {
      const activeEl = document.activeElement;
      if (activeEl && activeEl.tagName.toLowerCase() === 'sl-tab') {
        const tabs = this.getAllTabs();
        let index = tabs.indexOf(activeEl);
        if (event.key === 'Home') {
          index = 0;
        }
        else if (event.key === 'End') {
          index = tabs.length - 1;
        }
        else if (event.key === 'ArrowLeft') {
          index = Math.max(0, index - 1);
        }
        else if (event.key === 'ArrowRight') {
          index = Math.min(tabs.length - 1, index + 1);
        }
        tabs[index].setFocus();
        if (['top', 'bottom'].includes(this.placement)) {
          scrollIntoView(tabs[index], this.nav, 'horizontal');
        }
        event.preventDefault();
      }
    }
  }
  handleScrollLeft() {
    this.nav.scroll({
      left: this.nav.scrollLeft - this.nav.clientWidth,
      behavior: 'smooth'
    });
  }
  handleScrollRight() {
    this.nav.scroll({
      left: this.nav.scrollLeft + this.nav.clientWidth,
      behavior: 'smooth'
    });
  }
  updateScrollControls() {
    if (this.noScrollControls) {
      this.hasScrollControls = false;
    }
    else {
      this.hasScrollControls =
        ['top', 'bottom'].includes(this.placement) && this.nav.scrollWidth > this.nav.clientWidth;
    }
  }
  setActiveTab(tab, emitEvents = true) {
    if (tab && tab !== this.activeTab && !tab.disabled) {
      const previousTab = this.activeTab;
      this.activeTab = tab;
      // Sync tabs and panels
      this.getAllTabs().map(el => (el.active = el === this.activeTab));
      this.getAllPanels().map(el => (el.active = el.name === this.activeTab.panel));
      this.syncActiveTabIndicator();
      if (['top', 'bottom'].includes(this.placement)) {
        scrollIntoView(this.activeTab, this.nav, 'horizontal');
      }
      // Emit events
      if (emitEvents) {
        if (previousTab) {
          this.slTabHide.emit({ name: previousTab.panel });
        }
        this.slTabShow.emit({ name: this.activeTab.panel });
      }
    }
  }
  setAriaLabels() {
    const tabs = this.getAllTabs();
    const panels = this.getAllPanels();
    // Link each tab with its corresponding panel
    tabs.map(tab => {
      const panel = panels.find(el => el.name === tab.panel);
      if (panel) {
        tab.setAttribute('aria-controls', panel.getAttribute('id'));
        panel.setAttribute('aria-labelledby', tab.getAttribute('id'));
      }
    });
  }
  syncActiveTabIndicator() {
    const tab = this.getActiveTab();
    const width = tab.clientWidth;
    const height = tab.clientHeight;
    const offset = getOffset(tab, this.nav);
    const offsetTop = offset.top + this.nav.scrollTop;
    const offsetLeft = offset.left + this.nav.scrollLeft;
    switch (this.placement) {
      case 'top':
      case 'bottom':
        this.activeTabIndicator.style.width = `${width}px`;
        this.activeTabIndicator.style.height = null;
        this.activeTabIndicator.style.transform = `translateX(${offsetLeft}px)`;
        break;
      case 'left':
      case 'right':
        this.activeTabIndicator.style.width = null;
        this.activeTabIndicator.style.height = `${height}px`;
        this.activeTabIndicator.style.transform = `translateY(${offsetTop}px)`;
        break;
    }
  }
  render() {
    return (h("div", { part: "base", ref: el => (this.tabGroup = el), class: {
        'tab-group': true,
        // Placements
        'tab-group--top': this.placement === 'top',
        'tab-group--bottom': this.placement === 'bottom',
        'tab-group--left': this.placement === 'left',
        'tab-group--right': this.placement === 'right',
        'tab-group--has-scroll-controls': this.hasScrollControls
      }, onClick: this.handleClick, onKeyDown: this.handleKeyDown },
      h("div", { class: "tab-group__nav-container" },
        this.hasScrollControls && (h("sl-icon-button", { class: "tab-group__scroll-button tab-group__scroll-button--left", name: "chevron-left", onClick: this.handleScrollLeft })),
        h("div", { ref: el => (this.nav = el), key: "nav", part: "nav", class: "tab-group__nav", tabindex: "-1" },
          h("div", { ref: el => (this.tabs = el), part: "tabs", class: "tab-group__tabs", role: "tablist" },
            h("div", { ref: el => (this.activeTabIndicator = el), part: "active-tab-indicator", class: "tab-group__active-tab-indicator" }),
            h("slot", { name: "nav" }))),
        this.hasScrollControls && (h("sl-icon-button", { class: "tab-group__scroll-button tab-group__scroll-button--right", name: "chevron-right", onClick: this.handleScrollRight }))),
      h("div", { ref: el => (this.body = el), part: "body", class: "tab-group__body" },
        h("slot", null))));
  }
  static get is() { return "sl-tab-group"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["tab-group.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["tab-group.css"]
  }; }
  static get properties() { return {
    "placement": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'top' | 'bottom' | 'left' | 'right'",
        "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "The placement of the tabs."
      },
      "attribute": "placement",
      "reflect": false,
      "defaultValue": "'top'"
    },
    "noScrollControls": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Disables the scroll arrows that appear when tabs overflow."
      },
      "attribute": "no-scroll-controls",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "hasScrollControls": {}
  }; }
  static get events() { return [{
      "method": "slTabShow",
      "name": "sl-tab-show",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when a tab is shown."
      },
      "complexType": {
        "original": "{ name: string }",
        "resolved": "{ name: string; }",
        "references": {}
      }
    }, {
      "method": "slTabHide",
      "name": "sl-tab-hide",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted when a tab is hidden."
      },
      "complexType": {
        "original": "{ name: string }",
        "resolved": "{ name: string; }",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "show": {
      "complexType": {
        "signature": "(panel: string) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Shows the specified tab panel.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "host"; }
  static get watchers() { return [{
      "propName": "placement",
      "methodName": "handlePlacementChange"
    }, {
      "propName": "noScrollControls",
      "methodName": "handleNoScrollControlsChange"
    }]; }
}
