import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-30311a18.js';

const tabCss = ":host{position:relative;box-sizing:border-box}:host *,:host *:before,:host *:after{box-sizing:inherit}:host{--focus-ring:inset 0 0 0 var(--sl-focus-ring-width) var(--sl-focus-ring-color-primary);display:inline-block}.tab{display:inline-flex;align-items:center;font-family:var(--sl-font-sans);font-size:var(--sl-font-size-small);font-weight:var(--sl-font-weight-semibold);border-radius:4px;color:var(--sl-color-gray-600);padding:var(--sl-spacing-medium) var(--sl-spacing-large);white-space:nowrap;user-select:none;cursor:pointer;transition:var(--transition-speed) box-shadow, var(--transition-speed) color}.tab:hover:not(.tab--disabled){color:var(--sl-color-primary-500)}.tab:focus{outline:none}.tab:focus:not(.tab--disabled){color:var(--sl-color-primary-500);box-shadow:var(--focus-ring)}.tab.tab--active:not(.tab--disabled){color:var(--sl-color-primary-500)}.tab.tab--closable{padding-right:var(--sl-spacing-small)}.tab.tab--disabled{opacity:0.5;cursor:not-allowed}.tab__close-button{font-size:var(--sl-font-size-large);margin-left:var(--sl-spacing-xx-small)}.tab__close-button::part(base){padding:var(--sl-spacing-xxx-small)}";

let id = 0;
const Tab = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.slClose = createEvent(this, "sl-close", 7);
    this.componentId = `tab-${++id}`;
    /** The name of the tab panel the tab will control. The panel must be located in the same tab group. */
    this.panel = '';
    /** Set to true to draw the tab in an active state. */
    this.active = false;
    /** When true, the tab will be rendered with a close icon. */
    this.closable = false;
    /** Set to true to draw the tab in a disabled state. */
    this.disabled = false;
  }
  connectedCallback() {
    this.handleCloseClick = this.handleCloseClick.bind(this);
  }
  /** Sets focus to the tab. */
  async setFocus() {
    this.tab.focus({ preventScroll: true });
  }
  /** Removes focus from the tab. */
  async removeFocus() {
    this.tab.blur();
  }
  handleCloseClick() {
    this.slClose.emit();
  }
  render() {
    return (
    // If the user didn't provide an ID, we'll set one so we can link tabs and tab panels with aria labels
    h(Host, { id: this.host.id || this.componentId }, h("div", { part: "base", ref: el => (this.tab = el), class: {
        tab: true,
        // States
        'tab--active': this.active,
        'tab--closable': this.closable,
        'tab--disabled': this.disabled
      }, role: "tab", "aria-disabled": this.disabled ? 'true' : 'false', "aria-selected": this.active ? 'true' : 'false', tabindex: this.disabled || !this.active ? '-1' : '0' }, h("slot", null), this.closable && (h("sl-icon-button", { name: "x", class: "tab__close-button", onClick: this.handleCloseClick, tabIndex: -1, "aria-hidden": "true" })))));
  }
  get host() { return getElement(this); }
};
Tab.style = tabCss;

export { Tab as sl_tab };
